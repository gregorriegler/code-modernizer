import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from modernizer.tools.tool_library import ToolLibrary
from modernizer.tools.auto_generated_tool import AutoGeneratedTool
from .test_helpers import (
    create_temp_file,
    create_temp_directory_structure,
    verifyTool
)

library = ToolLibrary()

def test_ls_tool_basic_directory(tmp_path):
    directory_path, _, _, _, _ = create_temp_directory_structure(tmp_path)
    
    verifyTool(library, f"/ls {directory_path}")

def test_ls_tool_nonexistent_directory():
    verifyTool(library, "/ls /nonexistent/path")

def test_cat_tool_single_file(tmp_path):
    temp_file = create_temp_file(tmp_path, "test.txt", "Hello world\nSecond line\nThird line")
    
    verifyTool(library, f"/cat {temp_file}")

def test_cat_tool_nonexistent_file():
    verifyTool(library, "/cat /nonexistent/file.txt")

def test_cat_tool_empty_file(tmp_path):
    temp_file = create_temp_file(tmp_path, "empty.txt", "")
    
    verifyTool(library, f"/cat {temp_file}")

def test_unknown_command():
    verifyTool(library, "/unknown-command arg1 arg2")

def test_no_command_in_text():
    verifyTool(library, "This is just regular text without commands")

def test_tool_with_special_characters(tmp_path):
    special_file = create_temp_file(tmp_path, "special-file_name.txt", "Content with special chars: !@#$%^&*()")
    
    verifyTool(library, f"/cat {special_file}")

def test_auto_generated_tools_discovered():
    auto_generated_tools = [tool for tool in library.tools if isinstance(tool, AutoGeneratedTool)]
    discovered_tool_names = [tool.name for tool in auto_generated_tools]
    
    assert len(auto_generated_tools) > 1, f"Expected more than 1 auto-generated tool, found {len(auto_generated_tools)}"
    assert 'extract-method' in discovered_tool_names, f"extract-method not found in discovered tools: {discovered_tool_names}"

def test_create_tool_single_character_name(tmp_path):
    # Change to temp directory for test
    original_cwd = os.getcwd()
    os.chdir(tmp_path)
    
    try:
        verifyTool(library, "/create a")
        
        # Verify file was created
        assert os.path.exists("a"), "File 'a' should have been created"
        assert os.path.getsize("a") == 0, "File 'a' should be empty"
    finally:
        os.chdir(original_cwd)

def test_create_tool_simple_name_with_extension(tmp_path):
    # Change to temp directory for test
    original_cwd = os.getcwd()
    os.chdir(tmp_path)
    
    try:
        verifyTool(library, "/create test.txt")
        
        # Verify file was created
        assert os.path.exists("test.txt"), "File 'test.txt' should have been created"
        assert os.path.getsize("test.txt") == 0, "File 'test.txt' should be empty"
    finally:
        os.chdir(original_cwd)

def test_create_tool_single_character_content(tmp_path):
    # Change to temp directory for test
    original_cwd = os.getcwd()
    os.chdir(tmp_path)
    
    try:
        verifyTool(library, "/create test.txt a")
        
        # Verify file was created with correct content
        assert os.path.exists("test.txt"), "File 'test.txt' should have been created"
        with open("test.txt", "r") as f:
            content = f.read()
        assert content == "a", f"File 'test.txt' should contain 'a', but contains '{content}'"
    finally:
        os.chdir(original_cwd)