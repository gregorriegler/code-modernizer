import os
import subprocess
import json
from .auto_generated_analysis_tool import AutoGeneratedAnalysisTool

class AnalysisToolDiscovery:
    def __init__(self, runcommand):
        self.runcommand = runcommand
        self.cache_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'analysis-tools.json')
    
    def discover_analysis_tools(self):
        """Automatically discover all available C# analysis tools from JSON with caching"""
        tools_data = self._load_from_cache()
        if tools_data is None:
            tools_data = self._fetch_and_cache_tools()
        
        return [AutoGeneratedAnalysisTool(tool_data['name'], self.runcommand, tool_data)
                for tool_data in tools_data]
    
    def _load_from_cache(self):
        """Load tools data from cache file if it exists"""
        if os.path.exists(self.cache_file):
            with open(self.cache_file, 'r') as f:
                return json.load(f)
        return None
    
    def _fetch_and_cache_tools(self):
        """Fetch tools data from C# project and cache it"""
        tool_library_dir = os.path.dirname(os.path.abspath(__file__))
        project_path = os.path.join(tool_library_dir, '../../refactoring-tools/RoslynAnalysis/RoslynAnalysis.csproj')
        
        result = subprocess.run(
            ['dotnet', 'run', '--project', project_path, '--', '--list-tools'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode != 0:
            raise RuntimeError(f"Failed to discover analysis tools: {result.stderr}")
        
        tools_data = json.loads(result.stdout.strip())
        
        with open(self.cache_file, 'w') as f:
            json.dump(tools_data, f, indent=2)
        
        return tools_data