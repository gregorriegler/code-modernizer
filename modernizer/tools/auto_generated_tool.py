from .base_tool import BaseTool

class AutoGeneratedTool(BaseTool):
    """
    A tool that automatically generates its interface from the corresponding C# refactoring tool
    using reflection to read the tool's arguments and description.
    """
    
    def __init__(self, tool_name, runcommand, tool_data=None):
        super().__init__()
        self.name = tool_name
        self.runcommand = runcommand
        self._tool_data = tool_data
        self._info = None
        
    @property
    def info(self):
        """Get complete tool information from JSON or C# refactoring tool"""
        if self._info is None:
            if self._tool_data:
                self._info = self._convert_tool_data_to_info(self._tool_data)
            else:
                self._info = self.get_info_from_csharp(self.name)
        return self._info
    
    def _convert_tool_data_to_info(self, tool_data):
        """Convert JSON tool data to the expected info format"""
        program_args = ["project_path: string - Path to the project file",
                       "file_name: string - Name of the file to refactor"]
        refactoring_args = tool_data.get('arguments', [])[2:]  # Skip project_path and file_name
        
        return {
            'name': tool_data.get('name', self.name),
            'description': tool_data.get('description', f'Refactoring tool: {self.name}'),
            'program_arguments': program_args,
            'refactoring_arguments': refactoring_args
        }
        
    @property
    def description(self):
        """Get the tool description from the C# refactoring tool"""
        return self.info.get('description', f'Refactoring tool: {self.name}')
    
    @property
    def arguments(self):
        """Get structured argument information"""
        info = self.info
        program_args = info.get('program_arguments', [])
        refactoring_args = info.get('refactoring_arguments', [])
        return {
            'program_arguments': program_args,
            'refactoring_arguments': refactoring_args,
            'all_arguments': program_args + refactoring_args
        }
    
    def get_usage_info(self):
        """Get comprehensive usage information for this tool"""
        if self._tool_data:
            return self._get_usage_from_json()
        
        info = self.info
        args = self.arguments
        
        if 'error' in info:
            return f"Error getting tool information: {info['error']}"
        
        usage_info = f"""
Tool: {info.get('name', self.name)}
Description: {info.get('description', 'No description available')}

Usage: {self.name} <project_path> <file_name> [refactoring_arguments...]

Arguments:
  Program Arguments (common to all refactoring tools):
"""
        for arg in args['program_arguments']:
            usage_info += f"    - {arg}\n"
            
        if args['refactoring_arguments']:
            usage_info += "\n  Refactoring-specific Arguments:\n"
            for arg in args['refactoring_arguments']:
                usage_info += f"    - {arg}\n"
        else:
            usage_info += "\n  No refactoring-specific arguments.\n"
            
        return usage_info.strip()
    
    def _get_usage_from_json(self):
        """Get usage info directly from JSON data"""
        data = self._tool_data
        usage_info = f"""Tool: {data['name']}
Description: {data['description']}

Usage: /{data['name']} <arguments>

Arguments:"""
        
        for arg in data.get('arguments', []):
            usage_info += f"\n  - {arg}"
            
        return usage_info
    
    def get_argument_count(self):
        """Get the expected number of arguments for this tool"""
        args = self.arguments
        # Program args (project_path, file_name) + refactoring args
        return 2 + len(args['refactoring_arguments'])
    
    def validate_arguments(self, args):
        """Validate that the provided arguments match the expected format"""
        arg_list = args.split() if isinstance(args, str) else args
        expected_count = self.get_argument_count()
        
        if len(arg_list) != expected_count:
            usage = self.get_usage_info()
            return False, f"Expected {expected_count} arguments, got {len(arg_list)}.\n\n{usage}"
        
        return True, "Arguments are valid"
        
    def execute(self, args):
        """Execute the refactoring tool with the provided arguments"""
        # Validate arguments first
        is_valid, message = self.validate_arguments(args)
        if not is_valid:
            return f"Argument validation failed: {message}"
        
        arg_list = args.split() if isinstance(args, str) else args
        return self.runcommand('dotnet', [
            'run', '--project', 'refactoring-tools/RoslynRefactoring/RoslynRefactoring.csproj', 
            '--', self.name
        ] + arg_list)