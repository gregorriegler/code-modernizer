from .base_tool import BaseTool

class AutoGeneratedTool(BaseTool):
    """
    A tool that automatically generates its interface from the corresponding C# refactoring tool
    using reflection to read the tool's arguments and description.
    """
    
    def __init__(self, tool_name, runcommand, tool_data=None):
        super().__init__()
        self.name = tool_name
        self.runcommand = runcommand
        self._tool_data = tool_data
        self._info = None
        
    @property
    def info(self):
        """Get complete tool information from JSON or C# refactoring tool"""
        if self._info is None:
            if self._tool_data:
                self._info = self._convert_tool_data_to_info(self._tool_data)
            else:
                self._info = self.get_info_from_csharp(self.name)
        return self._info
    
    def _convert_tool_data_to_info(self, tool_data):
        """Convert JSON tool data to the expected info format"""
        args = tool_data.get('arguments', [])
        
        return {
            'name': tool_data.get('name', self.name),
            'description': tool_data.get('description', f'Refactoring tool: {self.name}'),
            'arguments': args
        }
        
    @property
    def description(self):
        """Get the tool description from the C# refactoring tool"""
        return self.info.get('description', f'Refactoring tool: {self.name}')
    
    @property
    def arguments(self):
        """Get argument information"""
        info = self.info
        return info.get('arguments', [])
    
    def get_usage_info(self):
        """Get comprehensive usage information for this tool"""
        if self._tool_data:
            return self._get_usage_from_json()
        
        info = self.info
        args = self.arguments
        
        if 'error' in info:
            return f"Error getting tool information: {info['error']}"
        
        usage_info = f"""Tool: {info.get('name', self.name)}
Description: {info.get('description', 'No description available')}

Usage: /{self.name} <arguments>

Arguments:"""
        
        for arg in args:
            usage_info += f"\n  - {arg}"
            
        return usage_info
    
    def _get_usage_from_json(self):
        """Get usage info directly from JSON data"""
        data = self._tool_data
        usage_info = f"""Tool: {data['name']}
Description: {data['description']}

Usage: /{data['name']} <arguments>

Arguments:"""
        
        for arg in data.get('arguments', []):
            usage_info += f"\n  - {arg}"
            
        return usage_info
    
    
    def execute(self, args):
        """Execute the refactoring tool with the provided arguments"""
        arg_list = args.split() if isinstance(args, str) and args else []
        
        return self.runcommand('dotnet', [
            'run', '--project', 'refactoring-tools/RoslynRefactoring/RoslynRefactoring.csproj',
            '--', self.name
        ] + arg_list)