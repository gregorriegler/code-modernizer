import os
import subprocess
import json
import configparser
from .auto_generated_tool import AutoGeneratedTool

class RefactoringToolDiscovery:
    def __init__(self, runcommand):
        self.runcommand = runcommand
        self.cache_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'refactoring-tools.json')
        self.refactoring_tools_path = self._load_refactoring_tools_path()

    def _load_refactoring_tools_path(self):
        """Load refactoring tools path from config.ini"""
        config = configparser.ConfigParser()
        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'config.ini')

        if os.path.exists(config_path):
            config.read(config_path)
            if 'paths' in config and 'refactoring_tools_path' in config['paths']:
                return config['paths']['refactoring_tools_path']

        # Fallback to default relative path if config not found
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../refactoring-tools')

    def discover_refactoring_tools(self):
        """Automatically discover all available C# refactoring tools from JSON with caching"""
        tools_data = self._load_from_cache()
        if tools_data is None:
            tools_data = self._fetch_and_cache_tools()

        return [AutoGeneratedTool(tool_data['name'], self.runcommand, tool_data)
               for tool_data in tools_data]

    def _load_from_cache(self):
        """Load tools data from cache file if it exists"""
        if os.path.exists(self.cache_file):
            with open(self.cache_file, 'r') as f:
                return json.load(f)
        return None

    def _fetch_and_cache_tools(self):
        """Fetch tools data from C# project and cache it"""
        project_path = os.path.join(self.refactoring_tools_path, 'RoslynRefactoring/RoslynRefactoring.csproj')

        result = subprocess.run(
            ['dotnet', 'run', '--project', project_path, '--', '--list-tools'],
            capture_output=True,
            text=True,
            timeout=10
        )

        if result.returncode != 0:
            raise RuntimeError(f"Failed to discover refactoring tools: {result.stderr}")

        tools_data = json.loads(result.stdout.strip())

        with open(self.cache_file, 'w') as f:
            json.dump(tools_data, f, indent=2)

        return tools_data
